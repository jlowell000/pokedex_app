!function(e){function t(t){for(var i,o,r=t[0],l=t[1],h=t[2],p=0,d=[];p<r.length;p++)o=r[p],n[o]&&d.push(n[o][0]),n[o]=0;for(i in l)Object.prototype.hasOwnProperty.call(l,i)&&(e[i]=l[i]);for(c&&c(t);d.length;)d.shift()();return a.push.apply(a,h||[]),s()}function s(){for(var e,t=0;t<a.length;t++){for(var s=a[t],i=!0,r=1;r<s.length;r++){var l=s[r];0!==n[l]&&(i=!1)}i&&(a.splice(t--,1),e=o(o.s=s[0]))}return e}var i={},n={0:0},a=[];function o(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=i,o.d=function(e,t,s){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(o.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(s,i,function(t){return e[t]}.bind(null,i));return s},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var r=window.webpackJsonp=window.webpackJsonp||[],l=r.push.bind(r);r.push=t,r=r.slice();for(var h=0;h<r.length;h++)t(r[h]);var c=l;a.push([10,1]),s()}({10:function(e,t,s){"use strict";s.r(t);s(1),s(6);const i={};class n{constructor(){}async get(e){return i[e]||(i[e]=fetch(e).then(e=>e.json())),i[e]}}class a{constructor(){this.cmn=new n,this.pokeapi="https://pokeapi.co/api/v2/"}async getPokemon(e){return this.cmn.get(`${this.pokeapi}pokemon/${e}/`)}async getPokemonList(e,t){return this.cmn.get(`${this.pokeapi}pokemon?offset=${e}&limit=${t}`)}async getSpecies(e){return this.cmn.get(`${this.pokeapi}pokemon-species/${e}/`)}async getAllVersions(){return this.cmn.get(`${this.pokeapi}version?offset=0&limit=999`)}async getVersion(e){return this.cmn.get(`${this.pokeapi}version/${e}/`)}async getType(e){return this.cmn.get(`${this.pokeapi}type/${e}/`)}async getMove(e){return this.cmn.get(`${this.pokeapi}move/${e}/`)}async getMoveDamageClass(e){return this.cmn.get(`${this.pokeapi}move-damage-class/${e}/`)}async getMoveLearnMethod(e){return this.cmn.get(`${this.pokeapi}move-learn-method/${e}/`)}}const o="en";function r(e){return e.filter(e=>e.language.name===o)}function l(e){return e.find(e=>e.language.name===o)}function h(e,t){return e.find(e=>e.version_group.name===t)}class c{constructor(e,t){this.ele=e,this.onChangeCallBack=t}async init(){let e=new a;return this.versions=(await e.getAllVersions()).results,this.versions=await Promise.all(this.versions.map(t=>e.getVersion(t.name))),this.ele.innerHTML=this.template(),this.ele.querySelector("select").addEventListener("change",this.onChange.bind(this)),!0}onChange(e){this.onChangeCallBack(this.versions.find(t=>t.name===e.target.selectedOptions[0].value))}getVersion(){let e=this.ele.querySelector("select").selectedOptions[0].value;return this.versions.find(t=>t.name===e)}template(){return`<div class="select">\n                    <select>\n                    <option>Select Version</option>\n                        ${this.versions.map(e=>`<option value='${e.name}'>${l(e.names).name}</option>`).join("")}\n                    </select>\n                </div>`}}class p{constructor(e,t){this.ele=e,this.type=t}async init(){return this.type=await(new a).getType(this.type.name),this.ele.innerHTML=this.template(),!0}template(){return`<span>${l(this.type.names).name}</span>`}}class d{constructor(e,t){this.ele=e,this.objList=t}async init(){this.ele.innerHTML=this.template(),this.objList.forEach((e,t)=>{e.ele=this.ele.querySelector(`#obj_${t}`)}),await Promise.all(this.objList.map(e=>e.init())),this.ele.querySelector("#list_spin").remove(),this.ele.querySelector("ul").classList.remove("is-invisible")}spinner(e){return`<div id=${e} class='columns'><i class='column fas fa-spinner fa-pulse fa-3x'/></i></div>`}template(){return`${this.spinner("list_spin")}<ul class='is-invisible'>${this.objList.map((e,t)=>`<li id='obj_${t}' style='border-top:solid;'></li>`).join("")}</ul>`}}class v{constructor(e,t){this.ele=e,this.flavorText=t}async init(){this.flavorText?(this.flavorText.version=await(new a).getVersion(this.flavorText.version.name),this.ele.innerHTML=this.template(l(this.flavorText.version.names).name,this.flavorText.flavor_text)):this.ele.innerHTML=this.template("","Not Available")}template(e,t){return`<div class='columns'>\n                    <div class='column is-2'><strong>${e} Pokedex Entry</strong>:</div>\n                    <div class='column'>${t}</div>\n                </div>`}}class m{constructor(e,t,s,i){this.ele=e,this.move=t,this.origMove=s,this.version=i}async init(){if(this.version){if(this.versionDetails=h(this.origMove.version_group_details,this.version.version_group.name),this.versionDetails){let e=new a,t=await Promise.all([await e.getMoveLearnMethod(this.versionDetails.move_learn_method.name),await e.getMove(this.move.name)]);return this.versionDetails.move_learn_method=t[0],this.move=t[1],this.move.damage_class=await e.getMoveDamageClass(this.move.damage_class.name),this.flavor_text=h(r(this.move.flavor_text_entries),this.version.version_group.name),this.ele.innerHTML=this.template(),await new p(this.ele.querySelector(`#${this.move.name}_type`),this.move.type).init(),!0}}else this.ele.innerHTML="Missing Version"}template(){return`<section class='section'>\n                    <div>\n                        <div class='columns'>\n                            <span class='column'><strong>${l(this.move.names).name}</strong></span>\n                            <span class='column'>Type: <span id='${this.move.name}_type'></span></span>\n                            <span class='column is-capitalized'>Class: ${l(this.move.damage_class.names).name}</span>  \n                            <span class='column'>Power: ${this.move.power?this.move.power:"-"}</span>\n                            <span class='column'>Accuracy: ${this.move.accuracy?this.move.accuracy:"-"}</span>\n                        </div>\n                        <div>${this.flavor_text?this.flavor_text.flavor_text:"-"}</div>\n                        ${this.versionDetails?this.learnMethodTemplate():""}\n                    </div>\n                </section>`}learnMethodTemplate(){return`<div>Learn Method: ${"level-up"===this.versionDetails.move_learn_method.name?`Learned at level ${this.versionDetails.level_learned_at}`:l(this.versionDetails.move_learn_method.descriptions).description}</div>`}}class u{constructor(e,t,s){this.ele=e,this.moveList=t.filter(e=>!!h(e.version_group_details,s.version_group.name)),this.version=s,this.objList=new d(this.ele,this.moveList.map(e=>new m(null,e.move,e,this.version)))}async init(){this.objList.init()}}class f{constructor(e){this.ele=e,this.data={},this.show=!1}async init(){if(this.data.id){let e=new a;this.data=await e.getPokemon(this.data.id),this.data.species=await e.getSpecies(this.data.species.name),console.log(this.ele),this.ele.innerHTML=this.template(),this.ele.querySelector(`#head_${this.data.id}`).addEventListener("click",this.headClick.bind(this)),this.ele.querySelector(`#types_${this.data.id}`).innerHTML=this.data.types.reverse().map(e=>`<span id='types_${this.data.id}_${e.type.name}'></span>`).join(" | ");let t=this.data.types.reverse().map(e=>new p(this.ele.querySelector(`#types_${this.data.id}_${e.type.name}`),e.type)).map(e=>e.init());return this.ele.querySelectorAll("nav .panel-heading").forEach(e=>e.addEventListener("click",this.tabClick.bind(this))),await Promise.all(t),!0}}headClick(){!this.show&&this.version?(this.ele.querySelector(`#body_${this.data.id}`).style.display="block",this.show=!this.show):(this.ele.querySelector(`#body_${this.data.id}`).style.display="none",this.show=!this.show)}initVersionedData(){var e,t;this[`flavor_text_${this.data.id}`]=new v(this.ele.querySelector(`#flavor_text_${this.data.id}`),(e=r(this.data.species.flavor_text_entries),t=this.version.name,e.find(e=>e.version.name===t)));let s=[this[`flavor_text_${this.data.id}`].init()];return this[`moves_${this.data.id}`]=new u(this.ele.querySelector(`#moves_${this.data.id}`),this.data.moves,this.version),this.ele.querySelector(`#moves_${this.data.id}_head`).classList.contains("is-active")&&s.push(this[`moves_${this.data.id}`].init()),Promise.all(s)}async onVersionChange(e){this.version=e,this.ele.querySelector("nav").style.display="block",await this.initVersionedData()}tabClick(e){e.target.classList.contains("is-active")?this.tabClear():(this.tabClear(),e.target.classList.add("is-active"),this.ele.querySelector(e.target.getAttribute("controls")).style.display="block",this.ele.querySelector(e.target.getAttribute("controls")).innerHTML||this[e.target.getAttribute("controls").replace("#","")].init())}tabClear(){this.ele.querySelectorAll("nav .panel-heading").forEach(e=>e.classList.remove("is-active")),this.ele.querySelectorAll("nav .panel-block").forEach(e=>e.style.display="none")}template(){return`<div class='panel'>\n                    <section id='head_${this.data.id}' class='panel-heading'>\n                        <div class='level'>\n                            <div class='level-left'>\n                                <span>\n                                    <figure class='image is-96x96'><img src='${this.data.sprites.front_default}'></figure>\n                                </span>\n                                <h1 class='title'>${l(this.data.species.names).name}</h1>\n                            </div>\n                            <div class='level-right'>\n                                <span id='types_${this.data.id}'></span>\n                            </div>\n                        </div>\n                    </section>\n                    <span id='body_${this.data.id}' class='panel-block' style='display:none'>\n                        <section class='section'>\n                            <div id='flavor_text_${this.data.id}'></div>\n                        </section>\n                        <section class='section'>\n                            <nav class='panel' style='display:none'>\n                                <p class='panel-heading' id='moves_${this.data.id}_head' controls='#moves_${this.data.id}'>Moves</p>\n                                <div id='moves_${this.data.id}' class='panel-block' style='display:none'></div>\n                            </nav>\n                        </section>\n                    </span>\n                </div>`}}class g{constructor(e){this.ele=e,this.offset=0,this.limit=5}async init(){this.toggleControls(!0);let e=new a,t=await e.getPokemonList(this.offset,this.limit);this.ele.innerHTML||(this.ele.innerHTML=this.template(),this.controlInit()),this.toggleControls(!0);let s=this.ele.querySelector("#list");s.innerHTML="",this.pokemonArr||(this.pokemonArr=new Array(t.count)),this.numberOfPages=Math.trunc(this.pokemonArr.length/this.limit),this.ele.querySelector("#select_page").innerHTML=this.pageSelectorTemplate(),this.ele.querySelector("#select_page select").value=Math.trunc(this.offset/this.limit),this.ele.querySelector("#select_page select").addEventListener("change",()=>{this.offset=parseInt(this.ele.querySelector("#select_page select").value)*this.limit,this.init()}),this.displayedPokemon=new Array(t.results.length),s.innerHTML=t.results.map(e=>`<li id='poke_${e.name}'></li>`).join("");for(let e=this.offset;e<this.offset+this.limit&&e<this.pokemonArr.length;e++)this.pokemonArr[e]||(this.pokemonArr[e]=t.results[e-this.offset]),this.displayedPokemon[e-this.offset]=new f(s.querySelector(`#poke_${this.pokemonArr[e].name}`)),this.displayedPokemon[e-this.offset].data.id=this.pokemonArr[e].name;this.versionPicker?this.version=this.versionPicker.getVersion():(this.versionPicker=new c(this.ele.querySelector("#version_picker"),this.onVersionChange.bind(this)),await this.versionPicker.init()),this.ele.querySelector("#select_limit select").value=this.limit;let i=this.numberOfPages*this.limit;this.offset<0?this.offset=0:this.offset>i&&(this.offset=i),await Promise.all(this.displayedPokemon.map(e=>e.init())),this.version&&await this.onVersionChange(this.version),this.toggleControls(!1)}async onVersionChange(e){return await Promise.all(this.displayedPokemon.map(t=>t.onVersionChange(e))),!0}controlInit(){this.ele.querySelector("#select_limit select").addEventListener("change",()=>{this.limit=parseInt(this.ele.querySelector("#select_limit select").value.trim()),this.init()}),this.ele.querySelector("#left_page").addEventListener("click",()=>{this.offset=this.offset-this.limit,this.offset<0&&(this.offset=0),this.init()}),this.ele.querySelector("#right_page").addEventListener("click",()=>{let e=this.numberOfPages*this.limit;this.offset=this.offset+this.limit,this.offset>e&&(this.offset=e),this.init()});let e=this.ele.querySelector(".navbar-burger"),t=this.ele.querySelector(".navbar-menu");e.addEventListener("click",()=>{let s=e.classList.contains("is-active");e.classList[s?"remove":"add"]("is-active"),t.classList[s?"remove":"add"]("is-active")})}toggleControls(e){this.ele.querySelectorAll("#left_page, #right_page, select").forEach(t=>t[e?"setAttribute":"removeAttribute"]("disabled",!0))}pageSelectorTemplate(){return`<select>${new Array(this.numberOfPages).fill(0).map((e,t)=>`<option value='${t}'>${t+1}</option>`).join("")}</select>`}template(){return"<nav class='navbar is-fixed-top is-danger'>\n                    <div class='navbar-menu'>\n                        <div class='navbar-end'>\n                            <div class='navbar-item'>\n                                <button id='left_page' class='button'><i class='fas fa-angle-left'></i></button>\n                                <span id='select_page' class='select'></span>\n                                <button id='right_page' class='button'><i class='fas fa-angle-right'></i></button>\n                            </div>\n                            <div class='navbar-item'>\n                                <span id='select_limit' class='select'>\n                                    <select>\n                                        <option value='5'>5</option>\n                                        <option value='10'>10</option>\n                                        <option value='20'>20</option>\n                                    </select>\n                                </span>\n                                <span> Per Page</span>\n                            </div>\n                            <div class='navbar-item'>\n                                <span id='version_picker'></span>\n                            </div>\n                        </div>\n                    </div>\n                    <a role='button' class='navbar-burger' aria-label='menu' aria-expanded='false'>\n                        <span aria-hidden='true'></span>\n                        <span aria-hidden='true'></span>\n                        <span aria-hidden='true'></span>\n                    </a>\n                </nav>\n                <section class='section'>\n                    <div class='container'>\n                        <ul id='list'></ul>\n                    </div>\n                </section>"}}class y{constructor(e){this.ele=e}async init(){return this.ele.innerHTML=this.template(),this.pokemon_list=new g(this.ele.querySelector("#output")),await this.pokemon_list.init(),!0}template(){return"<section class='section'>\n                    <span id='output'></span>\n                </section>"}}document.addEventListener("DOMContentLoaded",()=>{a||console.log("REQUEST_CACHE missing"),new y(document.querySelector("#pokedex")).init()})}});